//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/InputSystem/GameControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControl"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""7b9ade68-64b8-4237-8c9a-d119ebfb4879"",
            ""actions"": [
                {
                    ""name"": ""OpenStore"",
                    ""type"": ""Button"",
                    ""id"": ""091ca47c-74d7-4765-9c3d-cd71d40f3bad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenBook"",
                    ""type"": ""Button"",
                    ""id"": ""ea01e06b-5619-4e1f-aa22-016908ea2fb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""5a7bc608-01fe-4a61-b932-375ba7b0a99b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Craft"",
                    ""type"": ""Button"",
                    ""id"": ""08a33668-0747-406d-8850-7b76e9705451"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f7d2849a-0f56-4b86-a5af-d28fffab9238"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenStore"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fb3d6c5-8229-4eec-b394-de269d1d1460"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenBook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3401b2c2-0a29-4f4e-b6e2-ba59c7b2b140"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02ac78f5-b537-496e-9c13-9837fa3e154e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Craft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_OpenStore = m_Game.FindAction("OpenStore", throwIfNotFound: true);
        m_Game_OpenBook = m_Game.FindAction("OpenBook", throwIfNotFound: true);
        m_Game_Pause = m_Game.FindAction("Pause", throwIfNotFound: true);
        m_Game_Craft = m_Game.FindAction("Craft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_OpenStore;
    private readonly InputAction m_Game_OpenBook;
    private readonly InputAction m_Game_Pause;
    private readonly InputAction m_Game_Craft;
    public struct GameActions
    {
        private @GameControl m_Wrapper;
        public GameActions(@GameControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenStore => m_Wrapper.m_Game_OpenStore;
        public InputAction @OpenBook => m_Wrapper.m_Game_OpenBook;
        public InputAction @Pause => m_Wrapper.m_Game_Pause;
        public InputAction @Craft => m_Wrapper.m_Game_Craft;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @OpenStore.started += instance.OnOpenStore;
            @OpenStore.performed += instance.OnOpenStore;
            @OpenStore.canceled += instance.OnOpenStore;
            @OpenBook.started += instance.OnOpenBook;
            @OpenBook.performed += instance.OnOpenBook;
            @OpenBook.canceled += instance.OnOpenBook;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Craft.started += instance.OnCraft;
            @Craft.performed += instance.OnCraft;
            @Craft.canceled += instance.OnCraft;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @OpenStore.started -= instance.OnOpenStore;
            @OpenStore.performed -= instance.OnOpenStore;
            @OpenStore.canceled -= instance.OnOpenStore;
            @OpenBook.started -= instance.OnOpenBook;
            @OpenBook.performed -= instance.OnOpenBook;
            @OpenBook.canceled -= instance.OnOpenBook;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Craft.started -= instance.OnCraft;
            @Craft.performed -= instance.OnCraft;
            @Craft.canceled -= instance.OnCraft;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnOpenStore(InputAction.CallbackContext context);
        void OnOpenBook(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnCraft(InputAction.CallbackContext context);
    }
}
